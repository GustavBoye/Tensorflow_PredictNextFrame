import os
import random
import matplotlib.pyplot as plt
import tensorflow as tf
from PIL import Image
import numpy as np

def load_images(folder_path):
    images = []
    image_files = sorted([f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))])
    for image_file in image_files:
        image_path = os.path.join(folder_path, image_file)
        image = Image.open(image_path)
        image = image.resize((64, 64))  # Resize for faster training
        image = np.array(image) / 255.0  # Normalize pixel values
        images.append(image)
    return np.array(images)


def create_batch(images, batch_size):
    batch_input_frames = []
    batch_output_frames = []

    for i in range(batch_size):
        start_index = random.randint(0, len(images) - 6)
        input_frames = images[start_index:start_index + 4]  # Results in (4, 64, 64, 3)

        stacked_input_frames = np.concatenate(input_frames,
                                              axis=-1)  # Stack input frames along the last axis, results in (64, 64, 12)

        output_frame = images[start_index + 4]

        batch_input_frames.append(stacked_input_frames)
        batch_output_frames.append(output_frame)

    return np.array(batch_input_frames), np.array(batch_output_frames)


def build_model():
    model = tf.keras.Sequential([
        tf.keras.layers.Conv2D(12, (7, 7), activation='relu', padding='same', input_shape=(64, 64, 12)),
        tf.keras.layers.Conv2D(12, (7, 7), activation='relu', padding='same'),
        tf.keras.layers.Conv2D(3, (7, 7), activation='relu', padding='same'),
    ])

    model.compile(optimizer='adam',
                   loss='mse',  # Change loss function to mean squared error for regression
                   metrics=['accuracy'])
    return model



def predict_next_image(model, images):
    # Predict the next image based on the last three
    predicted_image = model.predict(np.expand_dims(images[-3:], axis=0))
    predicted_image_index = np.argmax(predicted_image)

    # Display the predicted image
    plt.imshow(images[predicted_image_index])
    plt.axis('off')
    plt.title(f'Predicted Image: {image_files[predicted_image_index]}')
    plt.show()

# Replace 'folder_path' with the path to your folder containing images
folder_path = 'C:/Users/G_Cha/Videos/ShortWater'
images = load_images(folder_path)


model = build_model()

# Train the model using batches
epochs = 1  # Example number of epochs

for step in range(32):  # Iterate over the number of batches
    # Create a batch of input-output frames
    batch_input_frames, batch_output_frames = create_batch(images, 8)

    model.fit(batch_input_frames, batch_output_frames)





def add_stack(stack, image):

    print(stack.shape) #(1, 64, 64, 12)
    print(image.shape) #(1, 64, 64, 3)


    stacked = np.concatenate([stack, image], axis=-1)
    print(stacked.shape)

    stacked_stripped = stacked[:, :, :, 3:]
    print(stacked_stripped.shape)


    return stacked_stripped




starting_point, s_output = create_batch(images, 1)
print(f"starting point shape: {starting_point.shape}")


for i in range(20):

    predicted_image = model.predict(starting_point)
    save_path = os.path.join("C:/Users/G_Cha/Videos/Predicted", f"predicted_image_{i}.png")
    plt.imsave(save_path, predicted_image[0])  # Save the image using matplotlib

    starting_point = add_stack(starting_point, predicted_image)
    print(f"starting point shape: {starting_point.shape}")
